The programming language of LowRes NX is based on the classic BASIC,
but with labels instead of line numbers. Let's call it LowRes BASIC.

***********************
* Types and Variables *
***********************

Available data types are strings and numbers (floating point).
Variable names can contain letters (A-Z), digits (0-9) and underscores
(_), but cannot begin with a digit. Reserved keywords cannot be used
as names, but they can contain them, for example:
Valid: ENDING
Invalid: END

String variable names must end with a $ symbol, for example:
NAME$

Variables are not be explicitly declared, they start to exist
automatically when first used. Values are assigned to variables using
the equal symbol:
NAME$="LOWRES NX"
LIVES=3

Hexadecimal and binary notation can be used for number values:
$FF02
%11001011


*************
* Operators *
*************

Symbol  Example Purpose
-       -B      Negation
^       X^3     Exponentiation
*       2*Y     Multiplication
/       X/2     Division
+       C+2     Addition
-       100-D   Subtraction
MOD     X MOD 2 Modulo

Operations are performed in mathematical order, for example
multiplications and divisions are performed before additions and
subtractions. The order can be specified explicitly through the use of
parentheses, for example: (3+4*3)/5

Relational:

Symbol  Example Purpose
=       A=10    Equal
<>      A<>100  Not equal
>       B>C     Greater than
<       5<X     Less than
>=      X>=20   Greater than or equal
<=      X<=30   Less than or equal

Relational operator expressions have a value of true (-1) or
false (0). For example: (2=3)=0, (4=4)=-1, (1<3)=-1

Logical:

Symbol  Example         Purpose
NOT     NOT (X=15)      Logical and bitwise "Not"
        NOT 0

AND     A=1 AND B=12    Logical and bitwise "And"
        170 AND 15

OR      X=10 OR Y=0     Logical and bitwise "Or"
        128 OR 2

XOR     A XOR B         Logical and bitwise "Exclusive Or"


All operators are available for numbers. Relational and addition
operators are usable with strings, too:
SUM=1+3
IF SUM<5 THEN PRINT "SUM IS LESS THAN 5"
NAME$="LOWRES NX"
GREET$="HELLO "+NAME$+"!"
IF NAME$>"LOWRES CODER" THEN PRINT GREET$

*******************
* Program Control *
*******************

REM

    REM remark

    Allows you to put comments into your program. REM lines are not
    executed.


IF...THEN...ELSE

    IF expression THEN statement [ELSE statement]

    IF expression THEN
        statements
    ELSE IF expression THEN
        statements
    ELSE
        statements
    END IF


GOTO

    GOTO label

    label:
    statements


GOSUB...RETURN

    GOSUB label

    label:
    statements
    RETURN


FOR...NEXT

    FOR var=a TO b [STEP s]
        statements
    NEXT var


DO...LOOP

    DO
      statements
    LOOP


REPEAT...UNTIL

    REPEAT
        statements
    UNTIL expression


WHILE...WEND

    WHILE expression
        statements
    WEND


END

    END


********
* Text *
********

PRINT

    PRINT expression-list

    Outputs text to the current window. Expressions can be strings or
    numbers, separated by commas or semicolons. A comma separates the
    output with a space, a semicolon outputs without space.
    End the list with a comma or semicolon to keep the cursor at the
    end of the output, otherwise a new line is started.


INPUT

    INPUT ["prompt";]var

    Lets the user enter a text or number on the keyboard and stores it
    in the variable var. Optionally it can show a prompt text before
    (cannot be a variable).


LOCATE

    LOCATE x,y

    Moves the text cursor to column x and row y inside the current
    window.


WINDOW

    WINDOW x,y,w,h,b

    Sets the text output window to cell position x,y and sets the size
    to w columns and h rows. Text will be written to background b (0
    or 1).

CLW

    CLW

    Clears the window with spaces.


**********
* Values *
**********

DIM

    DIM var-list

    Defines arrays with the highest index for each dimension:
    DIM A(100)
    DIM MAP(31,23,1),NAMES$(9),SCORES(9)

    Access elements from arrays, indices start from 0:
    SCORES(0)=100
    SCORES(9)=5
    PRINT SCORES(0),SCORES(9)


SWAP

    SWAP var1,var2

    Swaps the data between any two variables of the same type.


DATA

    DATA constant-list

    Stores comma separated numeric and string constants (values, but
    no variables or expressions) that are accessed by the READ
    statement. DATA statements are not executed and may be placed
    anywhere in the program.
    READ statements access DATA in order, from the top of a program
    until the bottom. All constants of all DATA statements are read as
    one continuous list of items.


READ

    READ var-list

    Reads values from DATA statements and assigns them to the
    comma separated variables in var-list. The program has an internal
    pointer to the current DATA value. With each value read, the
    pointer will move to the next DATA value.


RESTORE

    RESTORE [label]

    Changes the internal read pointer to another position. This allows
    to reread data or to select specific data. If the label parameter
    is omitted, READ will start again from the top of the program.
    Otherwise the pointer will be set to the jump label.


*********
* Maths *
*********

=PI

    PI

    PI is the ratio of the circumference of a circle to its diameter:
    3.1415926535...


=SIN

    SIN(x)

    The sine of x, where x is in radians.


=COS

    COS(x)

    The cosine of x, where x is in radians.


=TAN

    TAN(x)

    The tangent of x, where x is in radians.


=ATN

    ATN(x)

    The arctangent of x in radians, i.e. the angle whose tangent is x.
    The range of the function is -(PI/2) < ATN(X) < (PI/2).


=ABS

    ABS(x)

    The absolute value of x.


=SGN

    SGN(x)

    The sign of x: -1 if x < 0, 0 if x = 0 and +1 if x > 0.


=INT

    INT(x)

    The largest integer not greater than x; e.g. INT(1.3) = 1 and
    INT(-1.3) = -2.


=EXP

    EXP(x)

    The exponential of x, i.e. the value of the base of natural
    logarithms (e = 2,71828...) raised to the power x.


=LOG

    LOG(x)

    The natural logarithm of x; x must be greater than zero.


=SQR

    SQR(x)

    The nonnegative square root of x; x must be nonnegative.


=MIN

    MIN(x,y)

    The MIN function returns the smallest value of two expressions.


=MAX

    MAX(x,y)

    The MAX function returns the largest value of two expressions.


=RND

    RND

    The next number in a sequence of random numbers uniformly
    distributed in the range 0 <= RND < 1.


RANDOMIZE

    RANDOMIZE x

    RANDOMIZE TIMER


***********
* Strings *
***********

=LEFT$=

    LEFT$(s$,n)

    Returns a new string with the first n characters of s$.

    LEFT$(s$,n)=a$

    Overwrites the first characters in the variable s$ with the first
    n characters of a$.


=RIGHT$=

    RIGHT$(s$,n)

    Returns a new string with the last n characters of s$.

    RIGHT$(s$,n)=a$

    Overwrites the last characters in the variable s$ with the last n
    characters of a$.


=MID$=

    MID$(s$,p,n)

    Returns a new string with n characters of s$, starting at
    character p. The first character has the position 1.

    MID$(s$,p,n)=a$

    Overwrites the given text range in the variable s$ with the first
    n characters of a$.


=INSTR

    INSTR(d$,s$[,p])

    Searches the first occurrence of s$ inside of d$ and returns its
    start position. If it's not found, the function returns 0.
    Usually the function starts searching at the beginning of the
    string. Optionally it can start searching at position p.


=CHR$

    CHR$(n)

    Returns a string containing one character with ASCII code n.


=ASC

    ASC(a$)

    Supplies you with the ASCII code of the first character of a$.


=LEN

    LEN(a$)

    Returns the number of characters in a$.


=VAL

    VAL(a$)

    Converts a number written in a$ into a numeric value.


=STR$

    STR$(n)

    Converts the number n into a string.


=BIN$

    BIN$(n)

    Converts the number n into a binary string.


=HEX$

    HEX$(n)

    Converts the number n into a hexadecimal string.


***************
* Backgrounds *
***************

BG

    BG n

    Sets the current background (0 or 1).


CLS
    
    CLS

    Clears both backgrounds with character 0 and resets the current
    window to the default one.

    CLS b

    Clears background b with character 0.


CHAR

    CHAR n,(pal,fx,fy,pri,s)

    Sets the current character and attributes. All parameters can be
    omitted to keep their current settings.

    pal     palette number (0-7)
    fx      flip horizontally (0/1)
    fy      flip vertically (0/1)
    pri     priority flag (0/1)
    s       unused (0-3)

    CHAR n,a

    Allows setting the attributes as a single 8-bit value.


CELL

    CELL x,y

    Sets the cell at position x,y of the current background to the
    current character.


=CELL.C

    CELL.C(x,y)

    Returns the character of the cell at position x,y of the current
    background.


=CELL.A

    CELL.A(x,y)

    Returns the attributes of the cell at position x,y of the current
    background as an 8-bit value.


BG FILL

    BG FILL x1,y1 TO x2,y2

    Sets all cells in the area from x1,y1 to x2,y2 of the current
    background to the current character.


BG SOURCE

    BG SOURCE a,w

    Sets the current source for the BG COPY statement. The two-
    dimensional map starts at memory address "a" and has a width of w
    cells.


BG COPY

    BG COPY x1,y1,w,h TO x2,y2

    Copies a two-dimensional part of the current source to the
    current background.


BG SCROLL

    BG SCROLL x1,y1 TO x2,y2,dx,dy

    Moves the content of all cells in the area from x1,y1 to x2,y2
    horizontally by dx and vertically by dy cells.


TEXT

    TEXT x,y,s$

    Outputs the string s$ to the current background at cell position
    x,y.


NUMBER

    NUMBER x,y,n,d

    Outputs the number n to the current background at cell position
    x,y. The number is formatted to show always d digits.
    This statement is preferred over TEXT to show numbers, as it
    doesn't need to convert numbers to strings.


FONT
    
    FONT (pal,fx,fy,pri,s),c

    Sets the current attributes and character range used for text
    output. c is the character where the font starts (space).
    All parameters can be omitted to keep their current settings.

    pal     palette number (0-7)
    fx      flip horizontally (0/1)
    fy      flip vertically (0/1)
    pri     priority flag (0/1)
    s       unused (0-3)

    FONT a,c

    Allows setting the attributes as a single 8-bit value.


*****************
* USER CONTROLS *
*****************

=UP
=DOWN
=LEFT
=RIGHT

    UP(p)
    DOWN(p)
    LEFT(p)
    RIGHT(p)

    Returns true if the given direction is currently pressed on the
    direction pad of player p (0/1).

    UP TAP(p)
    DOWN TAP(p)
    LEFT TAP(p)
    RIGHT TAP(p)

    With the optional TAP keyword, this function returns true only for
    the first frame the button is pressed.


=BUTTON

    BUTTON(p,n)

    Returns true if button A (n=0) or B (n=1) is currently pressed by
    player p (0/1).

    BUTTON TAP(p,n)

    With the optional TAP keyword, this function returns true only for
    the first frame the button is pressed.


=TOUCH.X
=TOUCH.Y

    TOUCH.X
    TOUCH.Y

    Returns the current X or Y pixel position where the user touches
    the screen, or where it was touched the last time.


=TOUCH

    TOUCH

    Returns true if the screen is currently touched.


=TAP

    TAP

    Returns true if the screen is currently touched and was not
    touched the last frame.


=INKEY$

    INKEY$

    Returns the last pressed key as a string. If no key was pressed,
    it returns an empty string (""). After calling this function its
    value is cleared, so it returns each pressed key only once.


**********
* Screen *
**********

DISPLAY

    DISPLAY b,x,y

    Sets the scroll offset of background b (0/1) to pixel
    co-ordinates x,y.


DISPLAY.A

    DISPLAY.A (s,b0,b1)

    Sets the display attributes.

    s   sprites enabled (0/1)
    b0  background 0 enabled (0/1)
    b1  background 1 enabled (0/1)

    DISPLAY.A a

    Allows setting the attributes as a single 8-bit value.


=DISPLAY.X
=DISPLAY.Y

    DISPLAY.X(b)
    DISPLAY.Y(b)

    Return the scroll offset of background b.


=DISPLAY.A

    DISPLAY.A

    Returns the display attributes as an 8-bit value.


PALETTE

    PALETTE n,c0,c1,c2,c3

    Sets all four colors of palette n (0-7). Color 0 is only used for
    palette 0 and shown as the screen's backdrop color. The color
    parameters can be omitted to keep their current settings.
    Valid color values are 0-63 and can be calculated like this:
    VALUE = RED * 16 + GREEN * 4 + BLUE
    RED, GREEN and BLUE are values from 0 to 3.


=COLOR

    COLOR(p,n)

    Returns the value of color n (0-3) from palette p (0-7).
    You can get the RED, GREEN and BLUE values like this:
    RED = INT(VALUE / 16)
    GREEN = INT(VALUE / 4) MOD 4
    BLUE = VALUE MOD 4


WAIT VBL

    WAIT VBL

    Waits for the next frame. This should be the last statement in
    all loops which do animations and/or handle input, like the main
    game loop.


WAIT

    WAIT n

    Waits n frames (n/30 seconds).


ON RASTER GOSUB

    ON RASTER GOSUB label

    Sets a subroutine which is executed for every screen line before
    it's drawn. Usually used to change color palettes or scroll
    offsets to achieve graphical effects. Raster subroutines must be
    short.

    ON RASTER

    Removes the current subroutine.


=RASTER

    RASTER

    Returns the current screen line (y position). Use this in a raster
    subroutine.


ON VBL GOSUB

    ON VBL GOSUB label

    Sets a subroutine which is executed after each frame. Can be used
    to update animations or sounds, even if the main program is
    blocked by WAIT or INPUT.
    
    ON VBL

    Removes the current subroutine.


=TIMER

    TIMER

    Returns the number of frames shown since LowRes NX was started.
    The value wraps to 0 when 2592000 is reached, which is about 24
    hours.


**********
* Memory *
**********

=PEEK

    PEEK(a)

    Returns the current 8-bit value (0-255) at memory address a.


POKE

    POKE a,v

    Sets the memory at address a to value v. v can be any integer
    number, but only the lowest 8 bits are written to memory.


COPY

    COPY a,n TO d

    Copies n bytes starting from memory address a to address d.


FILL

    FILL a,n[,v]

    Sets n bytes starting from memory address a to value v, or 0 if
    the parameter is omitted.


=START

    START(n)

    Returns the memory address of ROM entry n.


=LENGTH

    LENGTH(n)

    Returns the number of bytes of ROM entry n.


***********
* Sprites *
***********

SPRITE

    SPRITE n,x,y,c

    Sets the position (x,y) and character (c) of sprite n (0-63).
    The top left corner of the screen is sprite position 32,32. Set
    the position to 0,0 to hide the sprite.
    All parameters can be omitted to keep their current settings.


SPRITE.A

    SPRITE.A n,(pal,fx,fy,pri,s)

    Sets the attributes of sprite n (0-63). All attribute parameters
    can be omitted to keep their current settings.

    pal     palette number (0-7)
    fx      flip horizontally (0/1)
    fy      flip vertically (0/1)
    pri     priority flag (0/1)
    s       size (0-3):
            0: 1 character (8x8 pixels)
            1: 2x2 characters (16x16 pixels)
            2: 3x3 characters (24x24 pixels)
            3: 4x4 characters (32x32 pixels)

    SPRITE.A n,a

    Allows setting the attributes as a single 8-bit value.


=SPRITE.X
=SPRITE.Y

    SPRITE.X(n)
    SPRITE.Y(n)

    Return the position of sprite n.


=SPRITE.C

    SPRITE.C(n)

    Returns the character of sprite n.


=SPRITE.A

    SPRITE.A(n)

    Returns the attributes of sprite n as an 8-bit value.


*********
* FILES *
*********

LOAD

    LOAD f$,a

    Loads the file f$ from the current virtual disk to memory starting
    at address a. Only the entry number in the file name is actually
    used, the rest of the name can be omitted (for example "#0").


SAVE

    SAVE f$,a,n

    Saves n bytes starting at memory address a to the current virtual
    disk as a file with name f$.
    File names are formatted as follows:
    #N:COMMENT
    N is the entry number (0-15) and the actual file identifier.
    COMMENT can be any text up to 31 characters and serves as
    information only.
    Example: "#0:MAIN SPRITES"
